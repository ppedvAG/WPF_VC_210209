<Window x:Class="Validation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Validation"
        mc:Ignorable="d"
        Title="MainWindow" Height="404" Width="391">

    <Window.DataContext>
        <local:Person/>
    </Window.DataContext>

    <Window.Resources>
        <!--ErrorTemplates sind ControlTemplates, welche das Element im Falle einer verletzten ValidationRule anzeigt-->
        <ControlTemplate x:Key="Ctp_Error_01">
            <StackPanel>
                <Border BorderBrush="Red" BorderThickness="2">
                    <!--AdornedElementPlaceholder sind Platzhalterelemente für das ürsprüngliche Element in
                        ErrorTemplates-->
                    <AdornedElementPlaceholder x:Name="Aep"/>
                </Border>
                <TextBlock Foreground="Red"
                           Text="{Binding ElementName=Aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
            </StackPanel>
        </ControlTemplate>

        <ControlTemplate x:Key="Ctp_Error_02">
            <StackPanel>
                <Border BorderBrush="Red" BorderThickness="2">
                    <AdornedElementPlaceholder x:Name="Aep"/>
                </Border>
                <Popup PlacementTarget="{Binding ElementName=Aep}"
                       Placement="Bottom"
                       PopupAnimation="Fade"
                       IsOpen="{Binding ElementName=Aep, Path=AdornedElement.IsMouseOver, Mode=OneWay}" 
                       AllowsTransparency="True">
                    <TextBlock Foreground="Black" Background="{x:Null}" Padding="5"
                               Text="{Binding ElementName=Aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                </Popup>
            </StackPanel>
        </ControlTemplate>
    </Window.Resources>

    <StackPanel Margin="5">
        <TextBox x:Name="Tbx_Input"
                 Validation.ErrorTemplate="{StaticResource Ctp_Error_02}">
            <TextBox.Text>
                <Binding ElementName="Tbl_Output" Path="Text" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <!--ValidationRules definieren, wann eine Eingabe durch den Benutzer eine zulässige Eingabe ist und
                        geben das Ergebnis dieser Prüfung an die GUI zurück. Im False-Fall wird gegebenenfalls ein ErrorTemplate
                        angezeigt. ValidationsRules werden als C#-Klasse abgelegt.-->
                        <local:IPv4Validation/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>
        </TextBox>
        <TextBlock x:Name="Tbl_Output"/>
        <TextBlock Text="{Binding ElementName=Tbx_Input, Path=(Validation.Errors)[0].ErrorContent}"/>

        <!--Mit der Property ValidatesOnExceptions können vom CodeBehind geworfene Exceptions als ValidierungsFall von der GUI aufgefangen werden-->
        <TextBox Text="{Binding Name, ValidatesOnExceptions=True, UpdateSourceTrigger=LostFocus}"
                 Validation.ErrorTemplate="{StaticResource Ctp_Error_01}"/>
        <!--Mit der Property ValidatesOnDataErrors können durch bestimmte Interfaces direkt in der Datenklasse ValidierungsFälle definiert werden-->
        <TextBox Text="{Binding Alter, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                 Validation.ErrorTemplate="{StaticResource Ctp_Error_01}"/>
    </StackPanel>

</Window>
